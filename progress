#!/usr/bin/env bash

set -euo pipefail

here=$(pwd)
puzzle_dir="$here/puzzle"
secrets_dir="$here/.secrets"
verbose="no"

while [[ $# -gt 0 ]]; do
    case "$1" in
        -c|--clean)
            rm -rf "$secrets_dir"
            shift;
            ;;
        -v|--verbose)
            verbose=yes
            shift;
            ;;
        *)
            >&2 echo "Unknown option: $1"
            exit 1
            ;;
    esac
done

function script_name() {
    printf "%s/clue-%03d.sh" "$here" "$1"
}

function answer_name() {
    printf "%s/secret-%03d.txt" "$secrets_dir" "$1"
}

function get_secret() {
    script=$(script_name "$1")
    answer=$(answer_name "$1")

    # Run the script if needed (no answer or out of date answer)
    if [[ ! -e "$answer" || "$script" -nt "$answer" ]]; then
        if [[ "$verbose" = "yes" ]]; then
            >&2 echo "Running $(basename "$script")"
        fi
        "$script" > "$answer" || return 1
    else
        if [[ "$verbose" = "yes" ]]; then
            >&2 echo "$(basename "$answer") up to date"
        fi
    fi

    # Should be a file by now.
    if [[ -e "$answer" ]]; then
        cat "$answer"
        return 0
    else
        >&2 echo "Weird. No answer file."
        return 1
    fi
}

function decrypt_trophy() {
    local keygen_opts
    read -ra keygen_opts < ./puzzle/.keygen-opts
    find .secrets/ -type f | sort | xargs cut -d : -f 1 | \
        openssl dgst -sha256 -binary | \
        openssl enc -d "${keygen_opts[@]}" \
                -in ./puzzle/.trophy.enc \
                -out ./puzzle/.trophy \
                -pass stdin 2> /dev/null
}

i=0
complete=0
progress_bar=
last_secret=

if [[ -f "$(script_name "0")" ]]; then

    if [[ ! -e puzzle/.hashes ]]; then
        echo "No hashes file."
        exit 2
    fi

    readarray -t hashes < <(tac "$puzzle_dir/.hashes")

    mkdir -p "$secrets_dir"


    while [[ "$i" -lt "${#hashes[@]}" ]]; do
        script=$(script_name "$i")
        if [[ -e "$script" ]]; then
            if secret=$(get_secret "$i"); then
                check=$(shasum <<< "${secret%%:*}" | cut -c -40)
                if [[ "${hashes[$i]}" = "$check" ]]; then
                    progress_bar+="✅"
                    complete=$((complete + 1))
                    last_secret="${secret##*: }"
                else
                    progress_bar+="❌"
                fi
            else
                >&2 echo "Problem running $script"
                progress_bar+="💣"
            fi
        else
            progress_bar+="⬜"
        fi
        i=$((i + 1))
    done

    echo
    if [[ "$complete" -lt "$i" ]]; then
        echo "$progress_bar $complete of $i complete "
        if [[ -n "$last_secret" ]]; then
            echo
            echo "Next clue: $last_secret"
            echo
            next_script="$(script_name "$complete")"
            if [[ ! -e "$next_script" ]]; then
                cat <<EOF > "$next_script"
#!/usr/bin/env bash

set -euo pipefail

EOF
                chmod +x "$next_script"
            fi
            echo "Write your code to extract this secret in ${next_script#"$here/"}"
            echo
        fi
    else
        if decrypt_trophy; then
            cat ./puzzle/.trophy
        else
            rm -f ./puzzle/.trophy
            >&2 echo "Uh oh. Your trophy seems to be damaged. But you're still a winner."
        fi
        echo
    fi
else

    ./build/build.sh

    full_first_script=$(script_name "0")
    first_script="${full_first_script#"$here/"}"

    cat <<EOF > "$first_script"
#!/usr/bin/env bash

set -euo pipefail

# Write your code here to extract the first secret. This script just needs to
# print the secret to its standard output. Note however: the goal is to write a
# script that actually gets the data from where it is hidden automatically. In
# some cases you will be able to find the secret by hand but don't then write a
# script that just prints out the secret because that won't work if the secret
# changes.

EOF
    chmod +x "$first_script"
    cat <<EOF

Welcome! To get started:

  1. Read ${puzzle_dir#"$(pwd)/"}/README for basic instructions.
  2  Write your first code in $first_script.
  3. Run this script again.

EOF

fi
