#!/usr/bin/env bash

set -euo pipefail

if [[ ! -e puzzle/.hashes ]]; then
    echo "No hashes file."
    exit 2
fi

here=$(pwd)
puzzle_dir="$here/puzzle"
solutions_dir="$here/solutions"
secrets_dir="$here/.secrets"
verbose="no"

while [[ $# -gt 0 ]]; do
    case "$1" in
        -c|--clean)
            rm -rf "$secrets_dir"
            shift;
            ;;
        -v|--verbose)
            verbose=yes
            shift;
            ;;
        *)
            >&2 echo "Unknown option: $1"
            exit 1
            ;;
    esac
done

mkdir -p "$secrets_dir"

function script_name() {
    printf "%s/clue-%03d.sh" "$solutions_dir" "$1"
}

function answer_name() {
    printf "%s/secret-%03d.txt" "$secrets_dir" "$1"
}

function get_secret() {
    script=$(script_name "$1")
    answer=$(answer_name "$1")

    # Run the script if needed (no answer or out of date answer)
    if [[ ! -e "$answer" || "$script" -nt "$answer" ]]; then
        if [[ "$verbose" = "yes" ]]; then
            >&2 echo "Running $(basename "$script")"
        fi
        (cd "$puzzle_dir" && "$script" > "$answer") || return 1
    else
        if [[ "$verbose" = "yes" ]]; then
            >&2 echo "$(basename "$answer") up to date"
        fi
    fi

    # Should be a file by now.
    if [[ -e "$answer" ]]; then
        secret=$(< "$answer")
        echo "${secret%%:*}"
        return 0
    else
        >&2 echo "Weird. No answer file."
        return 1
    fi
}

readarray -t hashes < <(tac puzzle/.hashes)

i=0
complete=0
bar=

while [[ "$i" -lt "${#hashes[@]}" ]]; do
    script=$(script_name "$i")
    if [[ -e "$script" ]]; then
        if secret=$(get_secret "$i"); then
            check=$(shasum <<< "${secret%%:*}" | cut -c -40)
            if [[ "${hashes[$i]}" = "$check" ]]; then
                bar+="✅"
                complete=$((complete + 1))
            else
                bar+="❌"
            fi
        else
            >&2 echo "Problem running $script"
            bar+="💣"
        fi
    else
        bar+="⬜"
    fi
    i=$((i + 1))
done

echo "$complete of $i complete $bar"
